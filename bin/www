#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatserver:server');
var http = require('http');
var { Server } = require("socket.io");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = new Server(server, {
  cors: "http://localhost:3000"
})

let onlineUser = [];
io.on("connection", (socket) => {
  console.log("My first practice with socket.io");
  console.log("Socket", socket.id);

  // listen to a connection
  // name of my event now is addNewUser
  socket.on("addNewUser", (userId) => {
    !onlineUser.some(user => user.userId === userId) &&
      onlineUser.push({
        userId,
        socketId: socket.id
      });
      io.emit("getOnlineUsers", onlineUser);
    console.log("Online user", onlineUser);
  });

  socket.on("disconnect", () => {
    onlineUser = onlineUser.filter(user => user.socketId !== socket.id);
    io.emit("getOnlineUsers", onlineUser);
  });

  // listen to a send message event
  socket.on("sendMessage", (message) => {
    console.log("message", message)
    const user = onlineUser.find(user => user.userId === message.otherId);
    console.log("This is the user I'm chatting with", user);

    if (user) {
      io.to(user.socketId).emit("getMessage", message);
      console.log("Am not getting any message");
    }
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log("server listening on", port)
}
